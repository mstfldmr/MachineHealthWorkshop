AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for various IoT workshops. Creates a Cloud9
  and SageMaker instance and bootstraps both instances.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: EC2 Instance Types
      Parameters:
      - 01C9InstanceType
      - 02MLInstanceType
    ParameterLabels:
      01C9InstanceType:
        default: 'EC2 Instance Type for Cloud9: '
      02MLInstanceType:
        default: 'EC2 Instance Type for Sagemaker: '
Parameters:
  01C9InstanceType:
    Description: Cloud9 instance type
    Type: String
    Default: m4.large
    AllowedValues:
    - m4.large
    - m4.xlarge
    - t2.large
    ConstraintDescription: Must be a valid Cloud9 instance type
  02MLInstanceType:
    Description: SageMaker instance type
    Type: String
    Default: ml.t2.medium
    AllowedValues:
    - ml.t2.large
    - ml.t2.medium
    - ml.m4.xlarge
    ConstraintDescription: Must be a valid SageMaker instance type
Mappings:
  CONFIG:
    C9-USER-DATA-SH:
      VERSION: '20190502'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.128.0/24
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: CFN Stack
        Value: !Ref AWS::StackName
      - Key: Name
        Value: IoT workshop 192.168.128.0/24
  PubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join ["", [!Ref 'AWS::Region', "a"]]
      CidrBlock: 192.168.128.0/25
      MapPublicIpOnLaunch: true
      Tags:
      - Key: CFN Stack
        Value: !Ref AWS::StackName
      - Key: Name
        Value: IoT workshop 192.168.128.0/25
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: CFN Stack
        Value: !Ref AWS::StackName
      - Key: Name
        Value: IoT workshop
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: GatewayToInternet
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: CFN Stack
        Value: !Ref AWS::StackName
      - Key: Name
        Value: IoT workshop
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnetRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnet
      RouteTableId: !Ref PublicRouteTable
  GGOtaS3UrlSignerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: !Join ["-", ["GGOtaS3UrlSignerPolicy", !Ref 'AWS::Region']]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::eu-central-1-greengrass-updates/*
            - arn:aws:s3:::eu-west-1-greengrass-updates/*
            - arn:aws:s3:::us-east-1-greengrass-updates/*
            - arn:aws:s3:::ap-northeast-1-greengrass-updates/*
            - arn:aws:s3:::us-west-2-greengrass-updates/*
            - arn:aws:s3:::ap-southeast-2-greengrass-updates/*
      Path: "/"
  IoTWSS3Bucket:
    Type: AWS::S3::Bucket
  IoTWSIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:*
          Resource:
          - "*"
  IoTWSRegLambdaJITRRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: !Join ["", ["IoTWSRegLambdaJITRPolicy-", !Ref 'AWS::Region']]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - iot:CreateThing
            - iot:UpdateCertificate
            - iot:CreatePolicy
            - iot:AttachPolicy
            - iot:DescribeCertificate
            - iot:AttachThingPrincipal
            Resource: "*"
      Path: "/"
  IoTWSIoTServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration
      - arn:aws:iam::aws:policy/service-role/AWSIoTLogging
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Path: "/"
  IoTWSIAMUser:
    Type: AWS::IAM::User
  IoTWSC9Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: !Join ["", ["IoTWSC9Policy-", !Ref 'AWS::Region']]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iot:*
            - greengrass:*
            - s3:*
            - signer:*
            - lambda:CreateFunction
            - lambda:GetFunction
            - lambda:ListFunctions
            - lambda:DeleteFunction
            - lambda:AddPermission
            - lambda:GetPolicy
            - lambda:UpdateFunctionCode
            - logs:FilterLogEvents
            - cloudformation:CreateChangeSet
            - cloudformation:CreateStack
            - cloudformation:DescribeChangeSet
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStacks
            - cloudformation:ExecuteChangeSet
            - cloudformation:GetTemplateSummary
            - cloudformation:ListStackResources
            - cloudformation:UpdateStack
            - iam:AttachRolePolicy
            - iam:DetachRolePolicy
            - iam:GetRole
            - iam:GetUser
            - iam:PassRole
            - iam:CreateRole
            - iam:DeleteRole
            - iam:ListUsers
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - acm:ImportCertificate
            - acm:ListCertificates
            - acm:DescribeCertificate
            - acm:DeleteCertificate
            - acm:GetCertificate
            Resource: "*"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: "/"
  IoTWSC9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref IoTWSC9Role
  IoTWSC9Instance:
    Description: "-"
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance for IoT workshops
      AutomaticStopTimeMinutes: 120
      InstanceType: !Ref '01C9InstanceType'
      Name: !Ref AWS::StackName
      SubnetId: !Ref 'PubSubnet'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Join ["", ["IoTWSLambdaPolicy-", !Ref 'AWS::Region']]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - iam:ListInstanceProfiles
            - iam:PassRole
            - ssm:DescribeInstanceInformation
            - ssm:SendCommand
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - !GetAtt IoTWSS3Bucket.Arn
            - !Join ["", [!GetAtt 'IoTWSS3Bucket.Arn', "/*"]]
  BootstrapC9InstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::BootstrapC9InstanceLambda
    DependsOn:
    - BootstrapC9InstanceLambdaFunction
    - IoTWSS3Bucket
    - IoTWSRegLambdaJITRRole
    - IoTWSIoTServiceRole
    - IoTWSIoTPolicy
    - IoTWSIoTServiceRole
    - IoTWSC9Instance
    - IoTWSC9InstanceProfile
    - IoTWSC9SecurityGroup
    - LambdaExecutionRole
    Properties:
      ServiceToken: !GetAtt 'BootstrapC9InstanceLambdaFunction.Arn'
      REGION: !Ref 'AWS::Region'
      StackName: !Ref 'AWS::StackName'
      EnvironmentId: !Ref 'IoTWSC9Instance'
      LabIdeInstanceProfileName: !Ref 'IoTWSC9InstanceProfile'
      LabIdeInstanceProfileArn: !GetAtt 'IoTWSC9InstanceProfile.Arn'
      S3_BUCKET: !Ref 'IoTWSS3Bucket'
      ARN_LAMBDA_ROLE: !GetAtt 'IoTWSRegLambdaJITRRole.Arn'
      ARN_IOT_PROVISIONING_ROLE: !GetAtt 'IoTWSIoTServiceRole.Arn'
      IOT_POLICY: !Ref 'IoTWSIoTPolicy'
      SecurityGroupId: !Ref 'IoTWSC9SecurityGroup'
  BootstrapC9InstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          C9_USER_DATA_VERSION: !FindInMap [ CONFIG, C9-USER-DATA-SH, VERSION ]
      Code:
        S3Bucket: prototypinglabs-workshop-public #mustafa
        S3Key: lambda/c9/bootstrap/c9_bootstrap_lambda2.zip
      Handler: c9_bootstrap_lambda.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python2.7
      MemorySize: 256
      Timeout: '600'
  IoTWSC9SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable access to various ports
      Tags:
      - Key: Name
        Value: C9 IoT workshop
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8883'
        ToPort: '8883'
        CidrIp: 0.0.0.0/0
  IoTWSSageMakerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable access to port 22
      Tags:
      - Key: Name
        Value: SageMaker IoT workshop
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  IoTWSSageMakerExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - sagemaker.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
      - PolicyName: IoTWSSageMakerInlinePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            - iam:GetRole
            Resource: "*"
  IoTWSSageMakerInstanceLifecycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      OnCreate:
      - Content:
          Fn::Base64:
            Fn::Join:
            - ''
            - - "#!/bin/bash -v\n"
              - "date\n"
              - "echo LANG=en_US.utf-8 >> /etc/environment\n"
              - "echo LC_ALL=en_US.UTF-8 >> /etc/environment\n"
              - "REGION="
              - !Ref 'AWS::Region'
              - "\n"
              - "S3_BUCKET="
              - !Ref 'IoTWSS3Bucket'
              - "\n"
              - "mkdir -p /home/ec2-user/SageMaker/MachineHealth\n"
              - "cd /tmp/\n"
              - "git clone https://github.com/mstfldmr/MachineHealthWorkshop\n"
              - "mv MachineHealthWorkshop/notebooks/* /home/ec2-user/SageMaker/MachineHealth\n"
#              - "rm -rf MachineHealthWorkshop\n"
              - "chown -R ec2-user:ec2-user /home/ec2-user/SageMaker/MachineHealth\n"
              - "exit 0"
  IoTWSSageMakerInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: !Ref AWS::StackName
      InstanceType: !Ref '02MLInstanceType'
      SubnetId: !Ref PubSubnet
      SecurityGroupIds:
        - !Ref IoTWSSageMakerSecurityGroup
      RoleArn: !GetAtt IoTWSSageMakerExecRole.Arn
      LifecycleConfigName: !GetAtt IoTWSSageMakerInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
      Tags:
      - Key: Name
        Value: IoT workshop
      VolumeSizeInGB: 20
Outputs:
  SageMakerInstance:
    Value:
      Fn::Join:
      - ''
      - - https://
        - !Ref 'AWS::Region'
        - ".console.aws.amazon.com/sagemaker/home?region="
        - !Ref 'AWS::Region'
        - "#/notebook-instances/openNotebook/"
        - !GetAtt IoTWSSageMakerInstance.NotebookInstanceName
  Cloud9IDE:
    Value:
      Fn::Join:
      - ''
      - - https://
        - !Ref 'AWS::Region'
        - ".console.aws.amazon.com/cloud9/ide/"
        - !Ref 'IoTWSC9Instance'
        - "?region="
        - !Ref 'AWS::Region'
  S3Bucket:
    Description: Name of the S3 Bucket for the IoT workshop
    Value:
      Ref: IoTWSS3Bucket
  IoTPolicy:
    Description: Name of the IoT policy for JITP
    Value:
      Ref: IoTWSIoTPolicy
  ArnIoTProvRole:
    Description: Role Arn for IoT device provisiong
    Value: !GetAtt IoTWSIoTServiceRole.Arn
  ArnLambdaRole:
    Description: Role Arn for the JITR Lambda function
    Value:
      Fn::GetAtt:
      - IoTWSRegLambdaJITRRole
      - Arn
  GGOtaS3UrlSignerRoleArn:
    Description: The IAM role arn for OTA which is used to presign the S3 url which
      links to the Greengrass software update.
    Value:
      Fn::GetAtt:
      - GGOtaS3UrlSignerRole
      - Arn
